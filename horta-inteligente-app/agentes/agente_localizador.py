# agentes/agente_localizador.py
import geopy.exc # Para tratamento de exce√ß√µes geopy
# As fun√ß√µes como geocode_address_nominatim, get_simulated_average_weather, etc.
# ser√£o importadas de utils.api_clients em app.py e usadas l√°,
# ou o agente pode import√°-las diretamente se utils.api_clients for auto-suficiente.
# Para este exemplo, assumiremos que as fun√ß√µes da C√©lula 2 do Colab est√£o em utils.api_clients
from utils.api_clients import (
    geocode_address_nominatim, 
    get_simulated_average_weather, 
    mock_api_dados_solo_regional
)
# mock_estimar_solo_regional e mock_estimar_clima_regional s√£o chamadas por geocode_address_nominatim
# que est√° em utils.api_clients, ent√£o n√£o precisam ser importadas aqui diretamente.


class AgenteLocalizadorAmbiental:
    def __init__(self):
        self.dados_localizacao_base = None
        self.dados_climaticos_atuais = None
        self.dados_solo_atuais = None
        print("AgenteLocalizadorAmbiental (Reformulado) instanciado.") # Mantenha prints para debug inicial

    def obter_localizacao_e_dados_ambientais_usuario(self, endereco_texto=None, app_nome_user_agent="MeuAppJardim/1.0"):
        print(f"\n--- {self.__class__.__name__}: Iniciando obten√ß√£o de localiza√ß√£o e dados ambientais ---")
        if not endereco_texto:
            # Em Streamlit, o input vir√° da UI, n√£o de input() aqui.
            # Este m√©todo ser√° chamado com 'endereco_texto' j√° preenchido.
            print("üö® [LOCALIZADOR] endereco_texto n√£o fornecido ao m√©todo.")
            return None

        self.dados_localizacao_base = geocode_address_nominatim(endereco_texto, user_agent_app_name=app_nome_user_agent)

        if not self.dados_localizacao_base:
            print("üö® [ERRO LOCALIZADOR] N√£o foi poss√≠vel obter e geocodificar a localiza√ß√£o do usu√°rio.")
            return None

        lat = self.dados_localizacao_base['latitude']
        lon = self.dados_localizacao_base['longitude']
        cidade = self.dados_localizacao_base.get('cidade', 'Local Desconhecido')
        solo_base_estimado = self.dados_localizacao_base.get('solo_base_regiao', 'N√£o especificado')

        self.dados_climaticos_atuais = get_simulated_average_weather(lat, lon, cidade)
        self.dados_solo_atuais = mock_api_dados_solo_regional(lat, lon, cidade, solo_base_estimado)

        dados_consolidados = {
            "localizacao": self.dados_localizacao_base,
            "clima": self.dados_climaticos_atuais,
            "solo": self.dados_solo_atuais
        }

        if self.dados_climaticos_atuais and self.dados_solo_atuais:
             print(f"Dados ambientais (simulados/regionais) para {cidade} obtidos com sucesso.")
        else:
            print(f"‚ö†Ô∏è [AVISO LOCALIZADOR] Alguns dados ambientais para {cidade} podem n√£o ter sido totalmente carregados.")
        return dados_consolidados

    def get_dados_ambientais_completos(self):
        if self.dados_localizacao_base and self.dados_climaticos_atuais and self.dados_solo_atuais:
            return { "localizacao": self.dados_localizacao_base, "clima": self.dados_climaticos_atuais, "solo": self.dados_solo_atuais }
        print("‚ö†Ô∏è [AVISO LOCALIZADOR] Dados ambientais incompletos ou n√£o dispon√≠veis no get_dados_ambientais_completos.")
        return None